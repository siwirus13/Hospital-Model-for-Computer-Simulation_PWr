import random


def ambulanse(patient_prob):
    new_patients = 0
    while True:
        if random.random() < patient_prob:
            new_patients += 1
        else:
            break

    return single_patient_generation(new_patients)


def single_patient_generation(new_patients):
    patients = []
    for _ in range(new_patients):
        patient_type = random.choices(
            ['green', 'yellow', 'orange', 'red'],
            weights=[0.25, 0.50, 0.20, 0.05],
            k=1
        )[0]
        patients.append([patient_type, 0, 0])
    return patients


def all_patients_generation(endtime, patient_prob):
    for time in range(endtime):
        new_patients = ambulanse(patient_prob)
        generated_patients.append(new_patients)
    print(generated_patients)


def state_change():
        global recoveries, deaths
        worsened = 0
        bettered = 0
        unchanged = 0

        for patient in hospitalized:

            patient[1] += 1
            if patient[0] == 'green':
                if random.random() < 0.1:
                    patient[0] = 'yellow'  # getting worse
                    worsened += 1
                    print('worsened')
                elif random.random() < 0.7:  # patient with green label is more likely to get from the hospital much quicker
                    recoveries += 1  # recovering
                    bettered += 1
                    hospitalized.remove(patient)
                    print('recovered')
                else:
                    unchanged += 1
            elif patient[0] == 'yellow':
                if random.random() < 0.3:
                    patient[0] = 'orange'  # getting worse
                    worsened += 1
                elif random.random() < 0.6:
                    patient[0] = 'green'  # getting better
                    bettered += 1
                else:
                    unchanged += 1
            elif patient[0] == 'orange':
                if random.random() < 0.4:
                    patient[0] = 'red'  # getting worse
                    worsened += 1
                elif random.random() < 0.7:
                    patient[0] = 'yellow'  # getting better
                    bettered += 1
                else:
                    unchanged += 1
            elif patient[0] == 'red':
                if random.random() < 0.5:
                    deaths += 1  # dying
                    worsened += 1
                    hospitalized.remove(patient)
                elif random.random() < 0.8:
                    patient[0] = 'orange'  # getting better
                    bettered += 1
                else:
                    unchanged += 1

        for patient in waiting:
            print('waiting')
            patient[2] = patient[2] + 1
            if patient[0] == 'green':
                if random.random() < 0.1:
                    patient[0] = 'yellow'  # getting worse
                    worsened += 1
                elif random.random() < 0.3:
                    recoveries += 1  # recovering
                    bettered += 1
                    waiting.remove(patient)
                else:
                    unchanged += 1
            elif patient[0] == 'yellow':
                if random.random() < 0.3:
                    patient[0] = 'orange'  # getting worse
                    worsened += 1
                elif random.random() < 0.6:
                    patient[0] = 'green'  # getting better
                    bettered += 1
                else:
                    unchanged += 1
            elif patient[0] == 'orange':
                if random.random() < 0.4:
                    patient[0] = 'red'  # getting worse
                    worsened += 1
                elif random.random() < 0.7:
                    patient[0] = 'yellow'  # getting better
                    bettered += 1
                else:
                    unchanged += 1
            elif patient[0] == 'red':
                if random.random() < 0.5:
                    deaths += 1  # dying
                    worsened += 1
                    waiting.remove(patient)
                else:
                    unchanged += 1

        print(f"Bettered: {bettered}, Worsened: {worsened}, Unchanged: {unchanged}")


def queue_ordering():
        global hospitalized, waiting
        priority_order = {'red': 0, 'orange': 1, 'yellow': 2, 'green': 3}
        waiting.sort(key=lambda patient: priority_order[patient[0]])



# Zmienne globalne
patient_prob = 0.83
beds = 40
endtime = 150
random.seed(43)

# Liczniki globalne
hospitalized = []
waiting = []
deaths = 0
recoveries = 0
generated_patients = []




def simulation():
    all_patients_generation()
    timecounter=0
    for arrived_patients in generated_patients:

        state_change()  # State change for all patients

        waiting.extend(arrived_patients)
        queue_ordering()

        for patient in waiting[:]:
            if len(hospitalized) < beds:
                hospitalized.append(patient)
                waiting.remove(patient)
                print(patient, 'hospitalized')
            else:
                continue


        print("-----------------------------")
        print(f"Time: {timecounter}")
        print(f"Hospitalized: {hospitalized}")
        print("Capacity: ", len(hospitalized), "/", beds)
        print(f"Waiting: {waiting}")
        print(f"Recoveries: {recoveries}, Deaths: {deaths}")
        timecounter += 1
        print("-----------------------------")


simulation()
